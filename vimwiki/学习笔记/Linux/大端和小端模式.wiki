= 大端和小端模式 =

%toc

== 端模式的由来 ==
{{{class="brush:text"
    端模式（Endian）的这个词出自Jonathan Swift书写的《格列佛游记》。这本书根据将鸡蛋敲开的方法
不同将所有的人分为两类，从圆头开始将鸡蛋敲开的人被归为Big Endian，从尖头开始将鸡蛋敲开的人被归
为Littile Endian。小人国的内战就源于吃鸡蛋时是究竟从大头（Big-Endian）敲开还是从小头（Little-Endian）
敲开。
    在计算机业Big Endian和Little Endian也几乎引起一场战争。在计算机业界，Endian表示数据在存储器中的存放顺序。
}}}

== 大端和小端示例 ==
- 如果将一个32位的整数0x12345678存放到一个整型变量（int）中，这个整型在内存中的存储分布情况分为大端(Big-Endian)和小端(Little-Endian)。
- `小端`模式更符合人的习惯，通常`高位的字节存放在内存的高位，低位的字节存放在内存的低位`。通常我们遇到的端模式属于小端模式。
- `大端`模式将`高位字节存放在内存的低位，低位字节存放在内存的高位`，有利于内存地址从左到右按照由低到高的顺序输出。

|          | 内存0x00 | 内存0x01 | 内存0x02 | 内存0x03 | 内存低位...内存高位 |
|----------|----------|----------|----------|----------|---------------------|
| 小端模式 | 0x78     | 0x56     | 0x34     | 0x12     | 符合人的习惯        |
| 大端模式 | 0x12     | 0x34     | 0x56     | 0x78     | 有利于内存地址输出  |

== 测试大小端的方法 ==
=== 方法一 - 结构体位模式 ===
{{{class="brush:c"
struct little_big_endian_t {
    unsigned int a:2;
    unsigned int b:2;
    unsigned int c:3;
    unsigned int d:1;
};

/**
 * @Synopsis 11110001 => 241, 小端模式会按照a,b,c,d的顺序从低到高存储数据。
 */
void test_little_big_endian()
{
    struct little_big_endian_t lb = {
        .a = 01,
        .b = 00,
        .c = 111,
        .d = 1
    };

    printf("lb = %d\n", *(int*)&lb); 
}
}}}

=== 方法二 - 指针强制转换 ===
{{{class="brush:c"
void test_little_big_endian2()
{
    static const int v = 1;
    char *endian = *(char*)&v == 1 ? "this is little endian" : "this is big endian";

    printf("%s\n", endian);
}
}}}

=== 方法三 - 宏定义===
{{{class="brush:c"
void test_little_big_endian3()
{
#if BYTE_ORDER == LITTLE_ENDIAN
    printf("this is little endian\n");
#endif

#if BYTE_ORDER == BIG_ENDIAN
    printf("this is big endian\n");
#endif

#if BYTE_ORDER == PDP_ENDIAN
    printf("this is pdp endian\n");
#endif
}
}}}
