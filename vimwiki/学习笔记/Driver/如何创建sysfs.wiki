= 如何创建sysfs =

%toc

== 相关文件 ==
{{{class="brush:c"
#include <linux/sysfs.h>
#include <linux/types.h>
}}}

== 概述 ==
- sysfs虚拟文件系统背后的机制是kobject，每一个sysfs目录都对应于一个kobject。关于sysfs，需要注意以下几个要点：
    - kobject在sysfs中的表现形式是目录，因此kobject_add的调用会创建一个目录。而目录中包含的文件是由属性决定。
    - kobject_set_name分配的名字是目录的名称。不能包含斜线字符和空格。
    - 目录的节点位置由parent和kset成员决定。如果parent为NULL，其位置在新创建的kobject的kset中。如果parent和kset都为NULL，它被创建在顶级的目录。
- 关于sysfs的相关知识，可参考[[../Linux/sys文件系统|sys文件系统]]。

== sysfs中的目录 ==
- 根据概述中的描述，每个kobject表现为sysfs中的目录。

== sysfs中的文件 ==
- sysfs中的文件是通过kobj_type结构的default_attrs成员实现的。

=== struct kobj_type ===
- sysfs_ops提供了对属性的操作方法。
- default_attrs表示属性，其表现形式为sysfs中的文件。
{{{class="brush:c"
struct kobj_type {
	void (*release)(struct kobject *kobj);
	const struct sysfs_ops *sysfs_ops;
	struct attribute **default_attrs;
	const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
	const void *(*namespace)(struct kobject *kobj);
};
}}}

=== struct attribute ===
- name表示属性的名称，对应于sysfs中的文件名。
- owner表示模块。
- mode表示读写权限。
{{{class="brush:c"
struct attribute {
	const char		*name;
	struct module	*owner;
	mode_t			mode;
};
}}}

=== struct bin_attribute ===
- bin_attribute表现为可接收二进制数据的属性文件。
{{{class="brush:c"
struct bin_attribute {
	struct attribute	attr;
	size_t			    size;
	void			    *private;
	ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
			        char *, loff_t, size_t);
	ssize_t (*write)(struct file *,struct kobject *, struct bin_attribute *,
			        char *, loff_t, size_t);
	int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
		            struct vm_area_struct *vma);
};
}}}

=== struct attribute_group ===
- attribute_group包含一组attribute。
{{{class="brush:c"
struct attribute_group {
	const char		    *name;
	mode_t			    (*is_visible)(struct kobject *, struct attribute *, int);
	struct attribute	**attrs;
};
}}}

=== struct sysfs_ops ===
- sysfs_ops结构为每个属性文件提供了用户空间访问的接口，其中
    - show方法为用户提供了读访问。
    - store方法为用户提供了写访问。
{{{class="brush:c"
struct sysfs_ops {
	ssize_t	(*show)(struct kobject *, struct attribute *,char *);
	ssize_t	(*store)(struct kobject *,struct attribute *,const char *, size_t);
};
}}}

=== __ATTR辅助宏 ===
- 内核提供了__ATTR宏，使得定义一个attribute变得简单。
{{{class="brush:c"
#define __ATTR(_name,_mode,_show,_store) {                  \
	.attr = {.name = __stringify(_name), .mode = _mode },	\
	.show	= _show,					                    \
	.store	= _store,					                    \
}

#define __ATTR_RO(_name) {                                  \
	.attr	= { .name = __stringify(_name), .mode = 0444 },	\
	.show	= _name##_show,					                \
}

#define __ATTR_NULL { .attr = { .name = NULL } }
}}}

== 创建sysfs文件和链接 ==
- sysfs_create_file用来创建一个attribute所对应的sysfs中的文件。
- sysfs_remove_file用来移除一个attribute所对应的sysfs中的文件。
- sysfs_create_bin_file用来创建一个二进制的文件。
- sysfs_remove_bin_file用来移除一个二进制的文件。
- sysfs_create_link用来创建一个指定kobject的链接。
- sysfs_remove_link用来移除一个指定kobject的链接。
- 以上列出了一小部分sysfs的方法，其内部是基于VFS机制，实现了一个[[虚拟文件系统]]，可参考内核源码kernel/fs/sysfs/目录下的内容。
