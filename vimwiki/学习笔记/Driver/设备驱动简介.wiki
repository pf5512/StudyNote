= 设备驱动简介 =

%toc

== 驱动程序的角色 ==
=== 机制和策略 ===
{{{class="brush:text"
    机制和策略的区分是其中一个在Unix设计背后的最好观念。大部分的编程问题其实可以划分为2部分:
    "提供什么能力"(机制)和"如何使用这些能力"(策略)。如果这两方面由程序的不同部分来表达，
或者甚至由不同的程序共同表达，软件包是非常容易开发和适应特殊的需求。

    例如，图形显示的Unix管理划分为X服务器，它理解硬件以及提供了统一的接口给用户程序，还有窗口
和会话管理器，它实现了一个特别的策略，而对硬件一无所知。人们可以在不同的硬件上使用相同的窗口管
理器，而且不同的用户可以在同一台工作站上运行不同的配置。甚至完全不同的桌面环境，例如KDE和GNOME，
可以在同一系统中共存。另一个例子是TCP/IP网络的分层结构: 操作系统提供 socket 抽象层，它对要传送
的数据而言不实现策略，而不同的服务器负责各种服务( 以及它们的相关策略)。而且，一个服务器，例如
ftpd提供文件传输机制，同时用户可以使用任何他们喜欢的客户端;无论命令行还是图形客户端都存在，并且
任何人都能编写一个新的用户接口来传输文件。

    在驱动相关的地方，机制和策略之间的同样的区分都适用。软驱驱动是不含策略的——它的角色仅仅是将
磁盘表现为一个数据块的连续阵列。系统的更高级部分提供了策略，例如谁可以存取软驱驱动，这个软驱是
直接存取还是要通过一个文件系统，以及用户是否可以加载文件系统到这个软驱。因为不同的环境常常需要
不同的使用硬件的方式，尽可能对策略透明是非常重要的。

    在编写驱动时，程序员应当特别注意这个基础的概念:编写内核代码来存取硬件，但是不能强加特别的策
略给用户，因为不同的用户有不同的需求。驱动应当做到使硬件可用，将所有关于如何使用硬件的事情留给应
用程序。一个驱动，这样，就是灵活的，如果它提供了对硬件能力的存取，没有增加约束。 
}}}

== 内核划分 ==
=== 进程管理 ===
{{{class="brush:text"
    内核负责创建和销毁进程，并处理它们与外部世界的联系(输入和输出)。不同进程间通讯(通过信号，
管道，或者进程间通讯原语)对整个系统功能来说是基本的，也由内核处理。另外，调度器，控制进程如何共享
CPU，是进程管理的一部分。更通常地，内核的进程管理活动实现了多个进程在一个单个或者几个CPU之上的抽象。
}}}

=== 内存管理 ===
{{{class="brush:text"
    计算机的内存是主要的资源，处理它所用的策略对系统性能是至关重要的。内核为所有进程的每一个都在
有限的可用资源上建立了一个虚拟地址空间。内核的不同部分与内存管理子系统通过一套函数调用交互，从简单
的malloc/free 对到更多更复杂的功能。
}}}

=== 文件系统 ===
{{{class="brush:text"
    Unix 在很大程度上基于文件系统的概念;几乎Unix中的任何东西都可看作一个文件。内核在非结构化的硬件
之上建立了一个结构化的文件系统，结果是文件的抽象非常多地在整个系统中应用。另外，Linux支持多个文件
系统类型，就是说，物理介质上不同的数据组织方式。例如，磁盘可被格式化成标准Linux的ext3文件系统，普遍
使用的FAT文件系统，或者其他几个文件系统。
}}}

=== 设备控制 ===
{{{class="brush:text"
    几乎每个系统操作最终都映射到一个物理设备上。除了处理器，内存和非常少的别的实体之外，全部中的任
何设备控制操作都由特定于要寻址的设备相关的代码来进行。这些代码称为设备驱动。内核中必须嵌入系统中出现
的每个外设的驱动，从硬盘驱动到键盘和磁带驱动器。内核功能的这个方面是本书中的我们主要感兴趣的地方。
}}}

=== 网络 ===
{{{class="brush:text"
    网络必须由操作系统来管理，因为大部分网络操作不是特定于某一个进程: 进入系统的报文是异步事件。报文
在某一个进程接手之前必须被收集，识别，分发。系统负责在程序和网络接口之间递送数据报文，它必须根据程序
的网络活动来控制程序的执行。另外，所有的路由和地址解析问题都在内核中实现。
}}}

{{http:pic/kernel_module.png}}


