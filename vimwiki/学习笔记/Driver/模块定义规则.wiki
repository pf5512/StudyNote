= 模块定义规则 =

%toc

== 头文件 ==
{{{class="brush:c"
#include <linux/module.h>
#include <linux/moduleparam.h>
#include <linux/init.h>
}}}

== MODULE_声明规则 ==
- 模块是以分层的形式组织，某些模块可以依赖于其他模块的支持。
- 导出符号表可以将模块自身的符号表提供给其他模块。
- 各种MODULE_声明可以出现在源码文件的任何函数之外的地方。但是惯例是把这些声明放在文件末尾。

{{http:pic/export_module.png}}

=== 模块的自身引用 ===
{{{class="brush:c"
extern struct module __this_module;
#define THIS_MODULE (&__this_module)
#else  /* !MODULE */
#define MODULE_GENERIC_TABLE(gtype,name)
#define THIS_MODULE ((struct module *)0)
#endif
}}}

=== 导出符号表 ===
{{{class="brush:c"
#define EXPORT_SYMBOL(sym)
#define EXPORT_SYMBOL_GPL(sym)
#define EXPORT_SYMBOL_GPL_FUTURE(sym)
#define EXPORT_UNUSED_SYMBOL(sym)
#define EXPORT_UNUSED_SYMBOL_GPL(sym)
}}}

=== 版权声明 ===
{{{class="brush:c"
/*
 * The following license idents are currently accepted as indicating free
 * software modules
 *
 *	"GPL"				[GNU Public License v2 or later]
 *	"GPL v2"			[GNU Public License v2]
 *	"GPL and additional rights"	[GNU Public License v2 rights and more]
 *	"Dual BSD/GPL"			[GNU Public License v2
 *					 or BSD license choice]
 *	"Dual MIT/GPL"			[GNU Public License v2
 *					 or MIT license choice]
 *	"Dual MPL/GPL"			[GNU Public License v2
 *					 or Mozilla license choice]
 *
 * The following other idents are available
 *
 *	"Proprietary"			[Non free products]
 *
 * There are dual licensed components, but when running with Linux it is the
 * GPL that is relevant so this is a non issue. Similarly LGPL linked with GPL
 * is a GPL combined work.
 *
 * This exists for several reasons
 * 1.	So modinfo can show license info for users wanting to vet their setup 
 *	is free
 * 2.	So the community can ignore bug reports including proprietary modules
 * 3.	So vendors can do likewise based on their own policies
 */
#define MODULE_LICENSE(_license) MODULE_INFO(license, _license)
}}}

=== 作者声明 ===
{{{class="brush:c"
/*
 * Author(s), use "Name <email>" or just "Name", for multiple
 * authors use multiple MODULE_AUTHOR() statements/lines.
 */
#define MODULE_AUTHOR(_author) MODULE_INFO(author, _author)
}}}
  
=== 模块描述 ===
{{{class="brush:c"
/* What your module does. */
#define MODULE_DESCRIPTION(_description) MODULE_INFO(description, _description)
}}}

=== 参数描述 ===
{{{class="brush:c"
/* One for each parameter, describing how to use it.  Some files do
   multiple of these per line, so can't just use MODULE_INFO. */
#define MODULE_PARM_DESC(_parm, desc) \
	__MODULE_INFO(parm, _parm, #_parm ":" desc)
}}}

=== 支持的设备列表 ===
{{{class="brush:c"
#define MODULE_DEVICE_TABLE(type,name)		\
  MODULE_GENERIC_TABLE(type##_device,name)
}}}

=== 模块版本 ===
{{{class="brush:c"
/* Version of form [<epoch>:]<version>[-<extra-version>].
   Or for CVS/RCS ID version, everything but the number is stripped.
  <epoch>: A (small) unsigned integer which allows you to start versions
           anew. If not mentioned, it's zero.  eg. "2:1.0" is after
	   "1:2.0".
  <version>: The <version> may contain only alphanumerics and the
           character `.'.  Ordered by numeric sort for numeric parts,
	   ascii sort for ascii parts (as per RPM or DEB algorithm).
  <extraversion>: Like <version>, but inserted for local
           customizations, eg "rh3" or "rusty1".

  Using this automatically adds a checksum of the .c files and the
  local headers in "srcversion".
*/
#define MODULE_VERSION(_version) MODULE_INFO(version, _version)
}}}

=== Firmware ===
{{{class="brush:c"
/* Optional firmware file (or files) needed by the module
 * format is simply firmware file name.  Multiple firmware
 * files require multiple MODULE_FIRMWARE() specifiers */
#define MODULE_FIRMWARE(_firmware) MODULE_INFO(firmware, _firmware)
}}}

=== 模块别名 ===
{{{class="brush:c"
/* For userspace: you can also call me... */
#define MODULE_ALIAS(_alias) MODULE_INFO(alias, _alias)
}}}

== 模块初始化与清理 ==
- 初始化函数和清理函数通常声明成static类型，因为它们不会被其他文件引用。
- 函数(__init和 __exit )和数据( __initdata和 __exitdata)的标记，只在模块初始化或者清理时调用。

=== module_init ===
- __init标志可能看起来有点怪; 它是一个给内核的暗示，给定的函数只是在初始化使用。模块加载者在模块加载后会丢掉这个初始化函数，使它的内存可做其他用途。

{{{class="brush:c"
/**
 * module_init() - driver initialization entry point
 * @x: function to be run at kernel boot time or module insertion
 */
#define module_init(x)	__initcall(x);

// 示例
static int __init init_func(void)
{
    ......
}

module_init(init_func);
}}}

=== module_exit ===
- 清理函数没有返回值，因此它被声明为void。
- __exit 修饰符标识这个代码是只用于模块卸载(通过使编译器把它放在特殊的ELF段)。如果你的模块直接建立在内核里，或者如果你的内核配置成不允许模块卸载，标识为 __exit的函数被简单地丢弃。
- 如果你的模块没有定义清理函数，内核不会允许它被卸载。

{{{class="brush:c"
/**
 * module_exit() - driver exit entry point
 * @x: function to be run when driver is removed
 */
#define module_exit(x)	__exitcall(x);

// 示例
static void __exit cleanup_func(void)
{
    ......
}

module_exit(cleanup_func);
}}}

== 给模块添加参数 ==
- 在使用insmod安装模块时可以为模块指定参数，参数类型为byte, short, ushort, int, uint, long, ulong, charp, bool or invbool。

=== module_param ===
{{{class="brush:c"
#define module_param(name, type, perm)				\
	module_param_named(name, name, type, perm)

// 示例
static char *whom = "world";
static int howmany = 1;
module_param(howmany, int, S_IRUGO);
module_param(whom, charp, S_IRUGO);
}}}
