= 方法对象 =

%toc

== Generator函数和yield ==
- `yield`用来生成Generator函数，该函数和普通函数有很大区别。一旦声明成Generator函数，需要调用next()方法来控制Generator函数的运行。
- 每次调用next()方法会返回yield表达式的值。
- 可通过for循环自动执行一个Generator函数的next()方法。
- 当循环结束时，next()方法会返回None。

{{{class="brush:python"
def generator():
    rtn = yield "here"

# 手动调用next()方法
>>> func = generator()
>>> func.next()
here

# 通过循环调用next()方法
>>> for i in func:
...     print i

here
None
}}}

== 可选参数和命名参数 ==
- 在函数定义时可以对该函数的参数赋予默认的值，在调用时没有传递的参数将被赋予默认值。

{{{class="brush:python"
def info(object, spacing=10, collapse=1):
    pass
    
>>> info(a)
>>> info(a, 30)
>>> info(a, 40, 50)
}}}

== 内嵌方法定义 ==
- Python支持在方法内部定义另一个方法，而内嵌方法只能被外部方法调用。

{{{class="brush:python"
def foo():
    # foo函数内部定义了bar函数
    def bar():
        foo_a = 100
        print foo_a

    # 只能在foo函数内部调用该方法
    bar()

foo()
}}}

== 闭包引起的问题 ==
- 闭包是在内嵌方法定义的时候产生，在内嵌方法中引用了外部方法定义的局部变量，见下面示例。
- 闭包产生的原因和Python语法原则：
    - 等号`左边的变量`会被处理称`为局部变量`。
    - 默认情况下Python查找变量的顺序为`local->闭包->global`。
    - 内嵌方法处理foo_a时，首先将它视为局部变量，而该局部变量在bar方法中是没有被定义的。
- 综上所述，闭包引起的问题可以认为是内嵌方法访问局部变量的问题。

{{{class="brush:python"
def foo():
    """foo函数定义的局部变量"""
    foo_a = 100

    def bar():
        """
        bar函数引用了foo函数的局部变量foo_a，
        并且在=号左边引用时，该变量被认为是bar函数的局部变量，
        因此在=号右边再次引用时，该变量会引起没有定义的异常。
        """
        foo_a = foo_a + 1
        print foo_a     # 引起未定义的局部变量异常

    bar()
    print foo_a

foo()
}}}
