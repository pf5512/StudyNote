= 观察者模式(Observer Pattern) =
_*在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。*_

{{http:pic/observer.png}}

*OO基础*
- 抽象
- 封装
- 多态
- 继承

*OO原则*
- 将变化的部分独立出来并进行封装。
- 针对接口编程，而不是实现编程。
- 多用组合，少用继承。
- 为交互对象之间设计松耦合。

*适用性*
- 当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。
- 当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。
- 当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。

