= 装饰者模式(Decorator Pattern) =
_*装饰者模式意味着一群装饰者类，这些类用来包装具体组件类，从而动态地给一个对象添加一些额外的职责。无论是装饰者类还是组件类，他们都继承自同一个抽象基类，该模式通过组合的方法达到无限扩展的目的*_

{{http:pic/decrator.png}}

*OO基础*
- 抽象
- 封装
- 多态
- 继承

*OO原则*
- 将变化的部分独立出来并进行封装。
- 针对接口编程，而不是实现编程。
- 多用组合，少用继承。
- 为交互对象之间设计松耦合。
- 对扩展开放，对修改关闭。

    该模式容易产生很多小类，让使用者难以理解如何使用他们。

*适用性*
- 在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。
- 处理那些可以撤消的职责。
- 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。

