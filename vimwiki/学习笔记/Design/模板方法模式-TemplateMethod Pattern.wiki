= 模板方法模式-TemplateMethod Pattern =
_*在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。*_

{{http:pic/templatemethod.png}}

*OO基础*
- 抽象
- 封装
- 多态
- 继承

*OO原则*
- 封装变化
- 多用组合，少用继承。
- 针对接口编程，而不是实现编程。
- 为交互对象之间设计松耦合。
- 对扩展开放，对修改关闭。
- 依赖抽象，而不要依赖具体类。
- 只和朋友交谈
- 别找我，我会找你。

*适用性*
- 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。
- 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。
- 控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。
