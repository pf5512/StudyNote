= 自定义控件属性 =

%toc

== XML定义 ==
=== 声明自定义属性的名称 ===
- 在values/attrs.xml中添加自定义属性的名称。
- `MyView`是自定义控件的类名。
{{{class="brush:xml"
<?xml version="1.0" encoding="UTF-8"?>
<resources>
    <!-- 它是一个指向style标签的引用，可在主题中定义该属性 -->
    <attr name="myViewStyle" format="reference" />
    
    <!-- MyView是自定义控件类名 -->
    <declare-styleable name="MyView">
        <attr name="TextAttrExt" format="reference|string"></attr>
        <attr name="OrientalAttrExt">
            <enum name="Horizontal" value="1"></enum>
            <enum name="Vertical" value="0"></enum>
        </attr>
        <attr name="BackgroundAttrExt" format="reference|color"></attr>
    </declare-styleable>
</resources>
}}}

=== 定义自定义属性值 ===
- 在定义控件的布局文件layout/main.xml中，添加自定义属性的值。
    - 首先要定一个XML的名字空间：xmlns:zenki="http://schemas.android.com/apk/res-auto"
    - 每个自定义属性前都需要添加名字空间的标识。
{{{class="brush:xml"
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    <!-- res-auto可改成res/package_name的形式 -->
    xmlns:zenki="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

    <com.example.testcustomattrbuite.MyView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        <!-- 以下是自定义属性 -->
        zenki:TextAttrExt="@string/hello_world" 
        zenki:OrientalAttrExt="Horizontal"
        zenki:BackgroundAttrExt="@drawable/my_view_background"/>

</RelativeLayout>
}}}

=== 通过定义风格文件指定属性值（可选） ===
- 在values/styles.xml中指定控件的默认属性值，名称定义为MyViewDefaultStyle。
- 解析属性值时，将R.style.MyViewDefaultStyle作为默认的风格资源，参见下面的解析自定义属性-方法一。
{{{class="brush:xml"
<resources>
    <style name="MyViewDefaultStyle">
        <item name="TextAttrExt">@string/hello_world</item>
        <item name="OrientalAttrExt">Horizontal</item>
        <item name="BackgroundAttrExt">@drawable/my_view_background</item> 
    </style>

    <style name="AppThemeDark" parent="@android:style/Theme.Black">
		<item name="myViewStyle">@style/MyViewDefaultStyle</item>
		<!-- 此处还可包含其他的风格定义 -->
	</style>
</resources>
}}}

== 解析自定义属性 ==
=== 方法一 ===
- 该方法需要配置一个默认的style来描述控件的属性值，参见上面一节的内容。
- 直接根据R文件中的属性ID获取属性值。
{{{class="brush:java"
private void getAttrMethod(AttributeSet attrs, int defStyle) {
    // 需要加载默认属性的风格ID：R.style.MyViewDefaultStyle
    TypedArray typeArray = getContext().obtainStyledAttributes(attrs,
            R.styleable.MyView, R.attr.myViewStyle, R.style.MyViewDefaultStyle);
            
    mText = typeArray.getText(R.styleable.MyView_TextAttrExt).toString();
    mOriental = typeArray.getInt(R.styleable.MyView_OrientalAttrExt, 0);
    mBitmap = drawableToBitmap(typeArray.getDrawable(R.styleable.MyView_BackgroundAttrExt));
    
    typeArray.recycle();
}
}}}

=== 方法二 ===
- 一般分两步读取自定义属性：
    - 首先读取attrs.xml中定义的属性名称，编译后属性的ID命名规则是`属性风格名称_属性名称`，例如MyView_TextAttrExt。
    - Resource对象根据属性名称在R文件中的定义——即属性ID，查找对应的资源ID，获取资源。
{{{class="brush:java"
private void getAttrMethod(AttributeSet attrs) {
    int resourceId = -1;
    
    // 获取TypedArray对象
    TypedArray typeArray = getContext().obtainStyledAttributes(attrs, R.styleable.MyView);
    // 获取属性值的数量
    int count = typeArray.getIndexCount();
    for (int i = 0; i < count; i++) {
        // 获取属性ID
        int attr = typeArray.getIndex(i);
        // 获取资源ID
        resourceId = typeArray.getResourceId(attr, 0);
        
        switch (attr) {
        case R.styleable.MyView_TextAttrExt:
            mText = typeArray.getResources().getText(resourceId).toString();
            break;
        case R.styleable.MyView_OrientalAttrExt:
            mOriental = typeArray.getInt(attr, 0);
            break;
        case R.styleable.MyView_BackgroundAttrExt:
            mBitmap = BitmapFactory.decodeResource(typeArray.getResources(), resourceId);
            break;

        default:
            break;
        }
    }

    typeArray.recycle();
}
}}}

=== 方法三 ===
- 使用构造函数传递的`AttributeSet`对象获取属性列表。
{{{class="brush:java"
private void getAttrMethod(Context context, AttributeSet attrs) {
    // 获取属性个数
    int count = attrs.getAttributeCount();
    String name;
    for (int i = 0; i < count; i++) {
        // 按照序号，获取属性名字
        name = attrs.getAttributeName(i);
        if (name.equals("text")) {
            // 调用getAttributeValue方法获取资源ID
            int resouceId = Integer.valueOf(attrs.getAttributeValue(i).substring(1));
            if (resouceId > 0) {
                // 根据资源ID获取属性值
                mTextContent = context.getResources().getText(resouceId).toString();
            }
        }
    }
}
}}}

= 主题、风格和属性 =
== 属性 ==
- 属性定义是一种可通过XML文件给控件定义特征的行为，通常定义在values/attrs.xml中。
- 通过以下格式声明属性：
{{{class="brush:xml"
<declare-styleable name="MyView">
    <attr name="background" format="reference" />
</declare-styleable>
}}}

- 通过以下格式使用属性：
{{{class="brush:xml"
<MyView
    <!-- 注意命名空间的定义 -->
    xmlns:myview="http://schemas.android.com/apk/res-auto"
    myview:background="@drawable/background" />
}}}

== 风格 ==
- 风格是一组属性值定义的集合，通常定义在values/styles.xml中。
- 通过以下格式定义风格：
{{{class="brush:xml"
<style name="MyViewDefaultStyle">
    <item name="TextAttrExt">@string/hello_world</item>
    <item name="OrientalAttrExt">Horizontal</item>
    <item name="BackgroundAttrExt">@drawable/my_view_background</item> 
</style>
}}}

- 通过主题引用风格：
{{{class="brush:xml"
<style name="AppTheme" parent="AppBaseTheme">
    <item name="myViewStyle">@style/MyViewDefaultStyle</item>
</style>
}}}

- 通过代码引用风格：
{{{class="brush:java"
// R.style.MyViewDefaultStyle为风格在R中的定义
TypedArray typeArray = getContext().obtainStyledAttributes(attrs,
				R.styleable.MyView, defStyle, R.style.MyViewDefaultStyle);
}}}

== 主题 ==
- 主题是一组风格的集合，通常定义在values/themes.xml中。
- 主题也是一种风格的定义，只是它通过指定的属性值，包含了多个风格。
- 通过以下格式定义主题：
{{{class="brush:xml"
<style name="AppTheme" parent="AppBaseTheme">
    <!-- myViewStyle是一个attr属性 -->
    <item name="myViewStyle">@style/MyViewDefaultStyle</item>
    <item ... 其他风格定义... />
</style>
}}}
