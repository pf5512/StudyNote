= ExtendableListView =

%toc

== 定义XMl布局文件 ==
=== main.xml ===
{{{class="brush:xml"
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <com.pateo.as.extendablelistview.AsExtendableListView
        android:id="@+id/id_ExpandableListView"
        android:layout_width="437dip"
        android:layout_height="800dip"
        android:clickable="true"
        android:scrollbarAlwaysDrawHorizontalTrack="true" >
    </com.pateo.as.extendablelistview.AsExtendableListView>

</LinearLayout>
}}}

=== group.xml ===
{{{class="brush:xml"
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <ImageView
        android:id="@+id/id_group_ImageView"
        android:layout_width="30dp"
        android:layout_height="30dp" >
    </ImageView>

    <TextView
        android:id="@+id/id_group_TextView"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:gravity="center" >
    </TextView>
</LinearLayout>
}}}

=== subchild.xml ===
{{{class="brush:xml"
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical" >

    <TextView
        android:id="@+id/id_child_TextView"
        android:layout_width="match_parent"
        android:layout_height="50dip"
        android:text="@string/hello_world" >
    </TextView>

    <RelativeLayout
        android:id="@+id/id_hide_layout"
        android:layout_width="match_parent"
        android:layout_height="300dip"
        android:visibility="gone" >
        <TextView
        android:id="@+id/id_child_TextView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" >
    </TextView>
    </RelativeLayout>
</LinearLayout>
}}}

== 加载控件 ==
=== 定义分组数据 ===
{{{class="brush:java"
AsExtendableListView mExpandListView;
public String[] mStrGroupTitles = { "第一组", "第二组" };
public String[] mStrChildContentOne =ExtendableListView { "child1" };
public String[] mStrChildContentTwo = { "child6", "child1d7", "child8", "child9" };
}}}

=== 定义适配器 ===
- 继承BaseExpandableListAdapter，通过getGroupView和getChildView返回自定义的视图布局
{{{class="brush:java"
public class TreeViewAdapter extends BaseExpandableListAdapter {
    private LayoutInflater inflater;
    private Context mContext;
    private TextView textView;

    class ViewHolder {
        ImageView imageView;
        TextView textView;
    }

    public TreeViewAdapter(Context context) {
        this.inflater = LayoutInflater.from(context);
        this.mContext = context;
    }

    @Override
    public Object getChild(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return 0;
    }

    // 返回子项目的视图布局
    @Override
    public View getChildView(int groupPosition, int childPosition,
            boolean isLastChild, View convertView, ViewGroup parent) {
        final View myView = inflater.inflate(R.layout.subchild, null);
        final int groupPos = groupPosition;
        final int childPos = childPosition;

        textView = (TextView) myView.findViewById(R.id.id_child_TextView);

        final RelativeLayout relativeLayout = (RelativeLayout) myView
                .findViewById(R.id.id_hide_layout);
        TextView itemView = (TextView) relativeLayout
                .findViewById(R.id.id_child_TextView2);
        itemView.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                Log.d(TAG, "itemView.setOnClickListener");
            }
        });

        textView.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                Log.i("getChildView", "groupPosition= " + groupPos);
                Log.i("getChildView", "childPosition= " + childPos);
            }
        });
        
        if (groupPosition == 0) {
            textView.setText(mStrChildContentOne[childPosition]);
        } else if (groupPosition == 1) {
            textView.setText(mStrChildContentTwo[childPosition]);
        }

        return myView;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        if (groupPosition == 0) {
            return mStrChildContentOne.length;
        } else if (groupPosition == 1) {
            return mStrChildContentTwo.length;
        }

        return 0;
    }

    @Override
    public Object getGroup(int groupPosition) {
        return "getGroup=" + groupPosition;
    }

    @Override
    public int getGroupCount() {
        return mStrGroupTitles.length;
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    // 返回第一级可扩展的视图布局
    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
            View convertView, ViewGroup parent) {
        View myView = convertView;
        if (null == myView) {
            myView = inflater.inflate(R.layout.group, null);
        }

        ViewHolder viewHolder = (ViewHolder) myView.getTag();

        if (null == viewHolder) {
            viewHolder = new ViewHolder();
            viewHolder.imageView = (ImageView) myView
                    .findViewById(R.id.id_group_ImageView);
            viewHolder.textView = (TextView) myView
                    .findViewById(R.id.id_group_TextView);
            myView.setTag(viewHolder);
        }

        viewHolder.textView.setText(mStrGroupTitles[groupPosition]);

        return myView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return false;
    }

    @Override
    public void onGroupCollapsed(int groupPosition) {
        Log.d(TAG, "getGroupView onGroupCollapsed=" + groupPosition);
        super.onGroupCollapsed(groupPosition);
    }

    @Override
    public void onGroupExpanded(int groupPosition) {
        Log.d(TAG, "getGroupView onGroupExpanded=" + groupPosition);
        super.onGroupExpanded(groupPosition);
    }
}
}}}

=== 自定义扩展和收缩的监听事件 ===
{{{class="brush:java"
private void initCustomExtendableListView() {
    this.setGroupIndicator(null);
    this.setChildIndicator(null);
    this.setCacheColorHint(0);
    this.setChildIndicatorBounds(1, 1);
    this.setSelector(R.drawable.button_selector);
    this.setBackgroundColor(0xffffffff);
    
    AsExtendableListView.this
            .setOnGroupExpandListener(mGroupExpandListener);
    AsExtendableListView.this
            .setOnGroupCollapseListener(mGroupCollapseListener);
}

// 当扩展一个Group时，自动收起其他的Group
OnGroupExpandListener mGroupExpandListener = new OnGroupExpandListener() {

    @Override
    public void onGroupExpand(int groupPosition) {

        final ExpandableListAdapter adapter = mAdapter;
        final int groupCount = adapter.getGroupCount();

        for (int i = 0; i < groupCount; i++) {
            if (groupPosition != i) {
                AsExtendableListView.this.collapseGroup(i);
            }
        }
    }
};

OnGroupCollapseListener mGroupCollapseListener = new OnGroupCollapseListener() {

    @Override
    public void onGroupCollapse(int groupPosition) {
    }
};
}}}
