= 通用布局 =

%toc

== 继承关系 ==

{{http:pic/view_her.jpg}}

== 布局类型 ==
=== FrameLayout ===
框架布局,该布局默认以左上角为基准,简单排放对象视图,通常用来显示图片

=== LinearLayout ===
线性布局,该布局将视图排放为水平或垂直形状

=== TableLayout ===
表格布局,该布局将视图分为行和列的形式

=== RelativeLayout ===
关联布局,该布局将一组相关视图关联起来,且任意设置位置

{{http:pic/layoutparams.png}}

== 生成布局 ==

=== 相关类 ===
{{{class="brush:java"
import android.view.LayoutInflater;

import android.widget.FrameLayout;
import android.widget.FrameLayout.LayoutParams;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TableLayout;
import android.widget.TableLayout.LayoutParams;
import android.widget.TableRow;
import android.widget.TableRow.LayoutParams;

import android.util.AttributeSet;
}}}

=== 在Activity中通过XML来加载视图 ===
- 在xml中定义视图的布局
- 在Activity派生类的`onCreate`方法中调用`setContentView`
 
{{{class="brush:java"
setContentView(R.layout.layout2);
}}}

=== 从XML膨胀视图 ===
- 需要android.view.LayoutInflater类,该类通过from方法生成实例,或者getSystemService方法获取
- 该实例通过inflate方法可以生成view对象
 
{{{class="brush:java"
LayoutInflater factory = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
LayoutInflater factory = LayoutInflater.from(this);

final View textEntryView = factory.inflate(R.layout.alert_dialog_text_entry, null);
}}}

=== 在Activity中用代码生成视图 ===
- 需要生成android.widget.Layout的派生类的实例
- 使用addView方法将View视图加入Layout,其中还需要将`LayoutParams`作为参数传入

{{{class="brush:java"
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
     
    // Create a simple layout
    LinearLayout layout = new LinearLayout(this);
    layout.setOrientation(LinearLayout.VERTICAL);
        
    // Create the spinner to allow the user to choose a menu XML
    ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,
            android.R.layout.simple_spinner_item, sMenuExampleNames); 
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    
    mSpinner = new Spinner(this);
    // When programmatically creating views, make sure to set an ID
    // so it will automatically save its instance state
    mSpinner.setId(R.id.spinner);
    mSpinner.setAdapter(adapter);
    
    // Add the spinner
    layout.addView(mSpinner,
            new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.FILL_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT));

    // Create help text
    mInstructionsText = new TextView(this);
    mInstructionsText.setText(getResources().getString(
            R.string.menu_from_xml_instructions_press_menu));
     
    // Add the help, make it look decent
    LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.FILL_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT);
    lp.setMargins(10, 10, 10, 10);
    layout.addView(mInstructionsText, lp);
     
    // Set the layout as our content view
    setContentView(layout);
}
}}}

=== 当子视图被创建完成 ===
- 重写onFinishInflate()方法,此方法在完成视图的创建時回調
- getLayoutInflater()获取解析XML文件的对象，并通过该对象加载子视图

{{{class="brush:java"
protected void onFinishInflate() {
    super.onFinishInflate();
    
    mInflater = ((Activity)this.getContext()).getLayoutInflater();
    mContentLayout = (LinearLayout) this.findViewById(R.id.content_layout); 
    
    // write your code to set view
    setDefaultLayout();
}
}}}

=== 当子视图的位置和大小被调整 ===
{{{class="brush:java"
protected void onLayout(boolean changed, int l, int t, int r, int b) { 
    childCount = getChildCount();       // 获取子视图数 
    childWidth = childCount > 0 ? getChildAt(0).getMeasuredWidth();     // 获取字节点的宽度 
    
    if (!setContentViewtShareWindowFlag && defaultWindow >= 0 && defaultWindow <= childCount-1) { 
        //设置默认窗口的左端距离 
        offset = -1 * defaultWindow * childWidth; 
        setShareWindowFlag = true; 
    } 
    
    //设置距离(0,0)点X轴方向的距离 
    int left = 0 + offset; 
    for (int i = 0; i < childCount; i++){ 
        //设置每个子视图在布局中的位置 
        View child = getChildAt(i); 
        if (child.getVisibility() != View.GONE) { 
            childCount.layout(left, 0, childWidth+left, child.getMeasuredHeight()); 
            left = left + childWidth; 
        } 
    } 
}
}}}
            
=== 调整视图大小 ===
{{{class="brush:java"
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { 
    super.onMeasure(widthMeasureSpec,heightMeasureSpec); 

    final int width = MeasureSpec.getSize(widthMeasureSpec);
    final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
    if (widthMode != MeasureSpec.EXACTLY) {
    }

    final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
    if (heightMode != MeasureSpec.EXACTLY) {
    }

    // 调整子视图的大小
    int childCount = getChildCount(); 
    for (int i = 0; i < childCountnt; i++) { 
        getChildAt(i).measure(widthMeasureSpec,heightMeasureSpecMeasureSpec); 
    } 
    
    // 调整自身的大小
    setMeasuredDimension(800, 600);
} 
}}}
