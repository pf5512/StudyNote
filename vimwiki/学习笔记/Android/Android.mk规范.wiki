= Android.mk规范 =

%toc

== 通用变量 ==
LOCAL_PATH := $(call my-dir) :: 根路径

include $(CLEAR_VARS) :: 清除变量

include $(subdir_makefiles) :: 包含所有子makefile文件

include $(call all-subdir-makefiles) :: 执行所有子目录的makefile文件

include $(call all-makefiles-under, $(LOCAL_PATH)) :: 执行某目录下的所有makefile文件

== 编译C模块 ==
LOCAL_LDLIBS := :: 包含库

LOCAL_SHARED_LIBRARIES := :: 包含共享库

LOCAL_STATIC_LIBRARIES := :: 包含静态库

LOCAL_SRC_FILES := :: 源文件路径

LOCAL_C_INCLUDES += $(JNI_H_INCLUDE) :: 头文件路径

LOCAL_MODULE := :: 模块名称

LOCAL_MODULE_TAGS := eng :: 标示模块信息

LOCAL_MODULE_PATH := $(TARGET_OUT) :: 目标安装路径

LOCAL_PRELINK_MODULE := false :: 是否执行预编译

- 相关变量设置参见[[Build环境变量]]

=== 路径说明 ===
TARGET_OUT_SHARED_LIBRARIES :: 共享库目录 out/target/product/generic/system/lib

TARGET_ROOT_OUT :: 根文件路径 out/target/product/generic/root

TARGET_OUT :: system文件路径 out/target/product/generic/system

TARGET_OUT_DATA :: data文件路径 out/target/product/generic/data

$(TARGET_OUT_DATA)/hw :: HAL库必须放在out/target/product/generic/system/lib/hw

=== 编译动作 ===
include $(BUILD_EXECUTABLE) :: 创建可执行文件

include $(BUILD_SHARED_LIBRARY) :: 创建动态链接库

include $(BUILD_STATIC_LIBRARY) :: 创建静态链接库

== 编译Java模块 ==
LOCAL_SRC_FILES := $(call all-subdir-java-files) :: 包含所有java源文件

LOCAL_MODULE := :: 模块名称

LOCAL_MODULE_TAGS := eng :: 标示模块信息

=== 编译动作 ===
include $(BUILD_JAVA_LIBRARY) :: 创建JAR库 

include $(BUILD_MULTI_PREBUILT) :: 多个预编译包

== 编译APK ==
LOCAL_SRC_FILES := $(call all-subdir-java-files) :: 包含所有java源文件

LOCAL_PACKAGE_NAME := :: apk名

LOCAL_CERTIFICATE := platform :: 赋予系统级别的权利

LOCAL_JAVA_LIBRARIES := :: 加入的jar包

LOCAL_STATIC_JAVA_LIBRARIES := :: 加入的java库，该库可使用LOCAL_PREBUILT_STATIC_JAVA_LIBRARIES变量指定的jar包进行编译

LOCAL_JNI_SHARED_LIBRARIES := :: 包含jni共享库

include $(BUILD_PACKAGE) :: 创建apk

== 示例代码 ==
=== 编译C静态库 ===
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE = libhellos
LOCAL_CFLAGS = $(L_CFLAGS)
LOCAL_SRC_FILES = hellos.c
LOCAL_C_INCLUDES = $(INCLUDES)
LOCAL_SHARED_LIBRARIES := \
    libandroid_runtime \
    libnativehelper \
    libcutils \
    libutils \
    libhardware
LOCAL_COPY_HEADERS_TO := libhellos
LOCAL_COPY_HEADERS := hellos.h

include $(BUILD_STATIC_LIBRARY)
}}}

=== 编译C动态库 ===
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE = libhellod
LOCAL_CFLAGS = $(L_CFLAGS)
LOCAL_SRC_FILES = hellod.c
LOCAL_C_INCLUDES = $(INCLUDES)
LOCAL_SHARED_LIBRARIES := libcutils
LOCAL_COPY_HEADERS_TO := libhellod
LOCAL_COPY_HEADERS := hellod.h

include $(BUILD_SHARED_LIBRARY)
}}}

=== 使用C静态库 ===
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE := hellos
LOCAL_STATIC_LIBRARIES := libhellos
LOCAL_SHARED_LIBRARIES :=
LOCAL_LDLIBS += -ldl
LOCAL_CFLAGS := $(L_CFLAGS)
LOCAL_SRC_FILES := mains.c
LOCAL_C_INCLUDES := $(INCLUDES)

include $(BUILD_EXECUTABLE)
}}}

=== 使用C动态库 ===
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_MODULE := hellod
LOCAL_MODULE_TAGS := debug
LOCAL_SHARED_LIBRARIES := libc libcutils libhellod
LOCAL_LDLIBS += -ldl
LOCAL_CFLAGS := $(L_CFLAGS)
LOCAL_SRC_FILES := maind.c
LOCAL_C_INCLUDES := $(INCLUDES)

include $(BUILD_EXECUTABLE)
}}}

=== 编译Jar库 ===
==== 编译jar库 ====
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_SRC_FILES := \
    $(call all-subdir-java-files) \
    core/java/mokoid/hardware/ILedService.aidl

include $(BUILD_JAVA_LIBRARY)
}}}

==== 需要编写jar包路径的XML ====
{{{class="brush:xml"
<?xml version="1.0" encoding="utf-8"?>
<permissions>
    <library name="com.mokoid.server" 
             file="/system/framework/mokoid.jar" />
</permissions>
}}}

- 拷贝xml文件至out/target/product/generic/system/etc/permissions目录
- 使用该jar需要在AndroidManifest.xml中加入以下定义

{{{class="brush:xml"
<use-library android:name="com.mokoid.demo">
}}}

=== 编译apk ===
{{{class="brush:c"
LOCAL_PATH:= $(call my-dir)
include $(CLEAR_VARS)

LOCAL_SRC_FILES := $(call all-subdir-java-files)

LOCAL_SRC_FILES += \
    xxx/xxx/xxx.aidl \
    xxx/xxx/xxx.java \
    xxx2/xxx2/xxx2.java

LOCAL_PACKAGE_NAME := Em1NotePad

// 需要权限才能使用系统的服务，如ServiceManager.addService()
LOCAL_CERTIFICATE := platform

LOCAL_JAVA_LIBRARIES := mokoid framework

include $(BUILD_PACKAGE) 
}}}
