= Audio系统(Android 2.3) =

%toc

== 相关文件 ==
{{{class="brush:text"
// java
frameworks/base/media/java/android/media/AudioManager.java
frameworks/base/media/java/android/media/AudioSystem.java
frameworks/base/media/java/android/media/AudioTrack.java
frameworks/base/media/java/android/media/AudioRecord.java
frameworks/base/media/java/android/media/AudioFormat.java
frameworks/base/media/java/android/media/AudioService.java

// jni
frameworks/base/core/jni/android_media_AudioTrack.cpp
frameworks/base/core/jni/android_media_AudioRecord.cpp
frameworks/base/core/jni/android_media_AudioSystem.cpp

// C/C++
frameworks/base/include/media/*
frameworks/base/media/mediaserver/main_mediaserver.cpp
frameworks/base/services/audioflinger/AudioFlinger.cpp
frameworks/base/services/audioflinger/AudioPolicyService.cpp
frameworks/base/services/audioflinger/AudioPolicyManagerBase.cpp
frameworks/base/media/libmedia/AudioTrack.cpp
frameworks/base/media/libmedia/AudioRecord.cpp
frameworks/base/media/libmedia/AudioSystem.cpp
frameworks/base/media/libmedia/AudioEffect.cpp

// HAL
hardware/libhardware_legacy/include/hardware_legacy/AudioHardwareInterface.h 
hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyInterface.h 
hardware/libhardware_legacy/include/hardware_legacy/AudioPolicyManagerBase.h 
}}}

== Audio系统概述 ==
- Audio系统主要包含以下几个层次：
    - Java层
        - AudioManager，该类为应用层提供接口，是Audio系统的管理类，提供设置Audio参数等功能，具体实现调用Service接口。
        - AudioService，该Service在SystemServer中注册，为AudioManager提供接口实现。
        - AudioSystem，该类是声音系统在Java层的抽象，主要通过JNI访问下层的接口。
        - AudioTrack，该类是放音系统在Java层的抽象，主要通过JNI访问下层的接口。
        - AudioRecord，该类是录用系统在Java层的抽象，主要通过JNI访问下层的接口。
        - AudioFormat，该类为Java层提供Audio的参数设置。
    - C++层
        - IAudioPolicyService，该接口负责提供声音控制的服务，包括调节音量大小、设置耳机类型等，主要通过AudioSystem接口实现具体功能。
        - AudioSystem，该类声音系统在C++层的抽象，主要通过IAudioFlinger接口实现具体功能。
        - AudioTrack，该类是放音系统在C++层的抽象，主要通过IAudioFlinger接口获取IAudioTrack来实现具体功能。
        - AudioRecord，该类是录用系统在C++层的抽象，主要通过IAudioFlinger接口获取IAudioRecord来实现具体功能。
        - AudioEffect，该类是混音效果在C++层的抽象，主要通过IAudioFlinger接口实现具体功能。
        - AudioFlinger，该类是IAudioFlinger的具体实现类，提供了方法来获取IAudioTrack和IAudioRecord。
        - TrackHandle，该类是IAudioTrack的具体实现类。
        - RecordHandle，该类是IAudioRecord的具体实现类。
    - 硬件抽象层
        - AudioHardwareInterface，硬件接口类。
        - AudioStreamIn，硬件输入接口类。
        - AudioStreamOut，硬件输出接口类。

== Audio各个层次的对应关系 ==
|              | Audio管理环节             | Audio输出                    | Audio输入                      |
|--------------|---------------------------|------------------------------|--------------------------------|
| Java层       | android.media.AudioSystem | android.media.AudioTrack     | android.media.AudioRecord      |
| 本地框架层   | AudioSystem               | AudioTrack                   | AudioRecord                    |
| AudioFlinger | AudioFlinger              | TrackHandle(实现IAudioTrack) | RecordHandle(实现IAudioRecord) |
| 硬件抽象层   | AudioHardwareInterface    | AudioStreamOut               | AudioStreamIn                  |

== Audio系统管理接口 ==
=== Audio系统的管理(AudioManager) ===
{{{class="brush:text"
    声音系统的管理由AudioManager负责，它是提供给应用层的接口，用来设置音效、蓝牙耳机开关、麦克风开关。
该类不做实际的放音和录音的操作，它会向下调用AudioService和AudioSystem接口来做具体操作。这里需要注意一下
声音焦点的处理。
    主要方法可参考以下列表：
}}}

| 方法名             | 描述 | 备注 |
|--------------------|------|------|
| adjustVolume       |      |      |
| adjustStreamVolume |      |      |
| getStreamMaxVolume |      |      |
| getStreamVolume    |      |      |
| setRingerMode      |      |      |
| getRingerMode      |      |      |
| setVibrateSetting  |      |      |
| getVibrateSetting  |      |      |
| setSpeakerphoneOn  |      |      |
| isSpeakerphoneOn   |      |      |
| startBluetoothSco  |      |      |
| stopBluetoothSco   |      |      |
| setBluetoothScoOn  |      |      |
| isBluetoothScoOn   |      |      |
| setWiredHeadsetOn  |      |      |
| isWiredHeadsetOn   |      |      |
| setMicrophoneMute  |      |      |
| isMicrophoneMute   |      |      |
| setMode            |      |      |
| getMode            |      |      |
| setRouting         |      |      |
| getRouting         |      |      |
| isMusicActive      |      |      |
| setParameter       |      |      |
| playSoundEffect    |      |      |

==== 请求声音焦点 ====
- AudioManager.requestAudioFocus方法用来向AudioService请求获得声音焦点，该方法首先会注册OnAudioFocusChangeListener，随后调用AudioService.requestAudioFocus。
- 请求声音焦点可以加入回调机制，AudioService.requestAudioFocus可以传入IAudioFocusDispatcher对象作为参数来处理回调。
- IAudioFocusDispatcher是用来进程间通讯的回调，因为要求获取焦点的通常是不同进程。查看该接口的实现，它会使用FocusEventHandlerDelegate类处理本地的回调，因此我们还需要注册一个本地的回调。
- AudioManager.registerAudioFocusListener方法注册一个本地回调接口OnAudioFocusChangeListener，该对象会加入到HashMap中，在IAudioFocusDispatcher调用时从HashMap中查找。
- 其他相关方法
    - 注销声音回调：unregisterAudioFocusListener。
    - 放弃声音焦点：abandonAudioFocus。

- 调用AudioService的同名方法，并注册一个回调来响应焦点变化。

{{{class="brush:java"
public int requestAudioFocus(OnAudioFocusChangeListener l, int streamType, int durationHint) {
    int status = AUDIOFOCUS_REQUEST_FAILED;
    if ((durationHint < AUDIOFOCUS_GAIN) || (durationHint > AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK))
    {
        return status;
    }
    // 注册本地回调
    registerAudioFocusListener(l);
    
    IAudioService service = getService();
    try {
        // 向service请求声音焦点
        status = service.requestAudioFocus(streamType, durationHint, mICallBack,
                mAudioFocusDispatcher, getIdForAudioFocusListener(l));
    } catch (RemoteException e) {
    }
    return status;
}
}}}

- 在本地维护一个回调的HashMap。

{{{class="brush:java"
public void registerAudioFocusListener(OnAudioFocusChangeListener l) {
    synchronized(mFocusListenerLock) {
        if (mAudioFocusIdListenerMap.containsKey(getIdForAudioFocusListener(l))) {
            return;
        }
        mAudioFocusIdListenerMap.put(getIdForAudioFocusListener(l), l);
    }
}
}}}

- 创建一个响应焦点变化的IAudioFocusDispatcher接口实现，该实现使用了FocusEventHandlerDelegate类。

{{{class="brush:java"
private IAudioFocusDispatcher mAudioFocusDispatcher = new IAudioFocusDispatcher.Stub() {
    public void dispatchAudioFocusChange(int focusChange, String id) {
        Message m = mAudioFocusEventHandlerDelegate.getHandler().obtainMessage(focusChange, id);
        mAudioFocusEventHandlerDelegate.getHandler().sendMessage(m);
    }
};
}}}

- 当发生声音焦点变化时，会根据相应的事件回调已注册的OnAudioFocusChangeListener对象。

{{{class="brush:java"
// Handler for audio focus events coming from the audio service.
private FocusEventHandlerDelegate mAudioFocusEventHandlerDelegate =
        new FocusEventHandlerDelegate();

// Helper class to handle the forwarding of audio focus events to the appropriate listener
private class FocusEventHandlerDelegate {
    ......
    FocusEventHandlerDelegate() {
        ...... 
        if (looper != null) {
            mHandler = new Handler(looper) {
                @Override
                public void handleMessage(Message msg) {
                    OnAudioFocusChangeListener listener = null;
                    synchronized(mFocusListenerLock) {
                        // 查找本地回调
                        listener = findFocusListener((String)msg.obj);
                    }
                    if (listener != null) {
                        // 调用本地回调
                        listener.onAudioFocusChange(msg.what);
                    }
                }
            };
        } 
        ......
    }
    ......
}
}}}

==== 注册Media按键的监听 ====
- 该功能是将相关应用注册给Service，当Media按键触发时，由Service调用注册的组件打开相应的媒体应用。
- registerMediaButtonEventReceiver用来注册监听，unregisterMediaButtonEventReceiver用来注销监听。这两个方法都是调用AudioService同名方法进行注册。
- 相关方法如下：

| 方法名                             | 描述 | 备注 |
|------------------------------------|------|------|
| registerMediaButtonEventReceiver   |      |      |
| unregisterMediaButtonEventReceiver |      |      |


=== Audio的Java层系统服务(AudioService) ===
- [[AudioService]]

== 声音系统的功能接口 ==
=== 管理接口(AudioSystem) ===
- [[AudioSystem]]：该组件主要用来管理AudioFlinger。

=== 声音输出(AudioTrack) ===
- [[AudioTrack]]：该组件主要负责声音的输出。

=== 音频采集(AudioRecord) ===
- [[AudioRecord]]：该组件主要负责音频数据的采集。

== 核心服务(C++层) ==
- Audio系统在C++层的两个核心服务是`AudioPolicyService`和`AudioFlinger`，见mediaserver的初始化。这两个服务使用Binder机制为上层提供接口调用。其中AudioPolicyService负责声音的控制，AudioFlinger负责音频数据的处理。
- 参考main_mediaserver示例

{{{class="brush:c++"
int main(int argc, char** argv)
{
    sp<ProcessState> proc(ProcessState::self());
    sp<IServiceManager> sm = defaultServiceManager();
    AudioFlinger::instantiate();
    MediaPlayerService::instantiate();
    CameraService::instantiate();
    AudioPolicyService::instantiate();
    ProcessState::self()->startThreadPool();
    IPCThreadState::self()->joinThreadPool();
}
}}}

=== 工作引擎(AudioFlinger) ===
- [[AudioFlinger]]：该组件是Audio系统的工作引擎，管理系统中的输入输出音频流、音频数据的混音，及通过HAL层读写硬件。

=== 策略管理(AudioPolicyService) ===
- [[AudioPolicyService]]：该组件负责Audio系统的策略控制，具体掌管系统中声音设备的选择和切换、音量控制等功能。

=== 音频多路输出 ===
- [[音频多路输出处理]]

=== 混音处理(AudioMixer) ===
- [[混音处理]]

== Audio硬件抽象层 ==
- [[Audio硬件抽象层]]
