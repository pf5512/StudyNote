= 逻辑架构视图的设计 =

%toc

== 概要 ==
- 首先是3种必用手段;
- 随后,纠正“我的接口我做主”这种错误认识,代之以“协作决定接口”的正确理解;
- 而且,本章将解析逻辑架构设计的整体思维套路,解决一线架构师郁闷已久的“多视图方法只讲做什么、不讲怎么做”的问题;
- 最后,总结逻辑架构设计的10条经验要点。

== 三种实践策略 ==
- 分层的细化。
- 分区的引入。
- 机制的提取。

=== 分层 ===
{{{class="brush:text"
1.  分层是最常用的架构模式,而笔者进一步认为:在架构设计初期,100%的系统都可以用分层架构,就算随着设计的深入而采用了其他架构模式也未必和分层架构矛盾。
2.  于是,架构师在划分子系统时常受到初期分层方式的影响——实际上,很多一线架构师最熟知、最自然的划分子系统的方式就是:分层的细化。
}}}

{{http:pic/layer.png}}

=== 分区 ===
==== 广度优先和深度优先 ====
{{{class="brush:text"
    广度优先极端情况下意味着对每一个功能进行定义,然后对每个功能进行设计,接着对每个功能进行编码,最后才对所有功能一起进行测试。而深度优先极端情况下
意味着对每个功能完整地进行定义、设计、编码和测试,而只有当这个功能完成了之后,你才能做下一个功能。当然,两个极端都是不好的,但深度优先要好得多。
对于大部分团队来说,应该做一个高级的广度设计,然后马上转到深度优先的底层设计和实现上去。
}}}

==== 分区设计 ====
{{{class="brush:text"
    为了支持迭代开发,逻辑架构设计中必须(注意是必须)引入分区。分区是一种单元,它位于某个层的内部,其粒度比层要小。一旦架构师针对每个层进行了分区设计,
“深度优先”式的迭代开发就非常自然。
}}}

==== 参考图 ====
{{http:pic/partition.png}}

=== 机制 ===
_机制才是设计的灵魂所在......否则我们就将不得不面对一群无法相互协作的对象,它们相互推搡着做自己的事情而毫不关心其他对象。_

==== 什么是机制 ====
- 基于接口(和抽象类)的协作是机制,基于具体类的协作则算不上机制。

{{{class="brush:text"
定义：软件系统中的机制,是指预先定义好的、能够完成预期目标的、基于抽象角色的协作方式。机制不仅包含了协作关系,同时也包含了协作流程。
}}}

==== 提取机制的示例 ====
{{http:pic/jizhi.png}}

== 总结 ==
=== 关注点分离 ===
{{{class="brush:text"
《软件架构设计》：
    首先,可以通过职责划分来分离关注点。 面向对象设计的关键所在, 就是职责的识别和分配。 每个功能的完成,都是通过一系列职责组成的“协作链条”完成的;
当不同职责被合理分离之后, 为了实现新的功能只须构造新的“协作链条” ,而需求变更也往往只会影响到少数职责的定义和实现......
    其次,可以利用软件系统各部分的通用性不同进行关注点分离。不同的通用程度意味着变化的可能性不同,将通用性不同的部分分离有利于通用部分的重用,也便于对专用部分修改......
    另外,还可以先考虑大粒度的子系统,而暂时忽略子系统是如何通过更小粒度的模块和类组......
}}}

=== 分层的维度 ===
- 首先,分层和机制位于不同的维度:`职责维`及`通用维`。
- 另外,是否引入分区,设计所“覆盖”的Scope是完全相同的。原因是层的粒度较大,而层内部引入的分区的粒度更小,便于组合出一个个功能(支持迭代开发)。这是第三维:`粒度`。

{{http:pic/3维度.png}}

=== 三种策略的设计原则 ===
- 职责不同的单元划归不同子系统。
- 通用性不同的单元划归不同子系统。
- 需要不同开发技能的单元划归不同子系统。
- 兼顾工作量的相对均衡,进一步切分太大的子系统。

{{http:pic/4大原则.png}}
