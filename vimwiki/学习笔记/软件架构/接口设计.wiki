= 接口设计 =

%toc

_世界是复杂的,很多东西难以直接获得。例如,直接追求幸福,是永远追不到的。《乐在工作》一书中说幸福是副产品。_

== 接口设计的原则 ==
- “分”是手段, “合”是目的。不能“合”在一起支持更高层次功能的模块,又有何用呢?
- 协作决定接口。
- 直接设计接口,是很多“面向接口的”架构依然拙劣的原因之一。类似“我的接口我做主”的观点是错误的。

== 逻辑架构设计的思路 ==
- 首先考虑结构方面的切分。手段是上面所讲分层的细化、分区的引入、机制的提取。(通过`包、接口图`来描述)
- 然后,让切分出的职责协作起来,验证能否完成功能。(通过`序列图`描述)
- 质疑设计
    - 功能方面,特殊的功能支持吗?
    - 质量方面,耦合性、重用性、性能等怎么样?

== 质疑驱动的思路 ==
- 第一步，质疑驱动的逻辑架构设计整体思路,是从运用分层的细化、分区的引入、机制的提取进行子系统划分开始的。
- 第二步，找到某功能的参与单元。若找不到或明显缺单元,就可以直接返回第1步了,以补充遗漏的职责单元。
- 第三步，让它们协作完成功能。研究第2步找到的参与单元之间的协作关系,看看能否完成预期功能,完成得怎么样?
- 第四步，质疑并推进设计的深入。通过质疑“对不对”和“好不好”,可以发现新职责,或者调整协作方式。这意味着,第1步的子系统切分方案被调整、被优化......如此循环。

{{http:pic/zhiyi_jiagou.png}}

== 设计模式在架构设计中的运用 ==
- 明确子系统内的结构。
- 明确包间的协作关系。
- 通过灰盒包图来实现

{{http:pic/灰盒包图1.png}}
{{http:pic/灰盒包图2.png}}

=== 灰盒包图示例 ===
{{http:pic/灰盒包图示例.png}}

== 压缩器设计范例 ==
=== 概念架构设计 ===
{{http:pic/myzip1.png}}

=== 结构的切分 ===
- 分层的细化。压缩实现层从原来的压缩控制层中分离出来。回忆本章所讲的“子系统划分策略背后的4大原则” 。无论是从职责不同的角度,还是从所需技能的角度考虑, 两者都应该分离成为单独的“子系统”。
- 分区的引入。界面交互层必须进一步分区,例如:支持右键菜单的“Windows 外壳扩 展”部分被独立。
- 机制的提取。例子是智能缓冲机制,它应该成为一个通用性的基础子系统。同时,为了使它可重用,缓冲区不负责“缓冲区已满”时的具体处理而是回调外部单元进行。再者,为了提高使用友好性,缓冲区具有一定“智能”,它会自动保存溢出的部分,从而简化使用缓冲区的接口。

{{http:pic/myzip2.png}}

=== 协作以验证 ===
{{http:pic/myzip3.png}}

=== 包-接口设计 ===
{{http:pic/myzip4.png}}

=== 质疑后的设计 ===
{{http:pic/myzip5.png}}
{{http:pic/myzip6.png}}

