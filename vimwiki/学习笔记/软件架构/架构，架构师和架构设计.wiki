= 架构，架构师和架构设计 =

%toc

== 三者的关系 ==
{{http:pic/架构和架构师.png}}

== 架构的定义 ==
架构 :: 是体现在它的组件中的一个系统的基本组织、它们批次的关系、与环境的关系及指导它的设计和发展的原则。

系统 :: 是组织起来完成某一特定功能或一组功能的组件集。系统这个术语包含了单独的应用程序、传统意义上的系统、子系统、系统之系统、产品线、产品组、整个企业感兴趣的其他集合。系统用于完成它的环境中一个或多个任务。

环境 :: 决定了对这个系统的开发、运作、政策以及会对系统造成影响的环境和设置。

任务 :: 由一个或多个利益相关者通过系统达到一些目标的系统的一个用途和操作。

利益相关者 :: 是对系统感兴趣的或与系统有关的一个单独的团队和组织。

=== 架构定义结构 ===
- 结构是一个架构的本质特征

{{http:pic/结构部件.png}}

=== 架构定义行为 ===
- 架构除了定义结构部件之外，还定义了这些结构部件之间的交互。这些交互提供了期望的系统行为。

{{http:pic/行为部件.png}}

=== 架构关注重要的元素 ===
- 架构只关心长期和持久效果的元素，那些用来解决重要特性的元素。
- 架构的相对稳定在某种程度上来说是一个优秀的架构的象征。

=== 架构平衡利益相关者的需要 ===
- 最终用户的需求和直观正确的行为、性能、可靠性、可用性、实用性及安全有关。
- 系统管理员的需求和直观的行为、管理及帮助监控的工具有关。
- 市场人员的需求和竞争特性、市场时机、与其他产品的定位及成本有关。
- 消费者的需求和成本、稳定性及进度有关。
- 开发人员的需求和明晰的需求、简单一致的设计方法有关。
- 相关经理的需求和项目追踪的可预见性、进度、资源产出率及预算有关。
- 维护人员的需求和易于理解、可靠及包含文档的设计方法有关，还与进行修改的容易程度有关。

=== 架构基于合理的证据使决策具体化 ===
- 架构的一个重要方面不仅是最终结果——架构本身，还要有解释为什么这样做的合理证据。

=== 架构会遵循一种架构风格 ===
- 每个结构良好的软件密集型系统都充满了模式。
- 一种架构风格根据结构组织的模式定义了一个系统家族。

=== 架构受它的环境影响 ===
- 一个系统存在于一个环境中，而这个环境会影响它的架构。有时候会称为环境中的架构。

=== 架构影响开发团队的结构 ===
- 一个架构定义了解决一组特定关注点所关联的要素集。其中每个要素集都可能要求一组不同的技能。因此，使软件开发团队的结构与它定义后的架构保持一致，这非常有意义。
- 架构上的划分应该反映地理上的划分，反之亦然。架构上的职责应该进行分派，这样才能在本地（地理上的）进行决策。

=== 所有系统都存在架构 ===
- 无论是有意的或是偶然的，基本上每个软件密集型的系统都拥有一个架构。每个架构都以一种功能性的、经济的和优雅的方式控制了系统的能力。

== 架构师 ==
架构师 :: 是负责系统架构的人、团队或组织。

=== 架构师是技术领导 ===
- 首先，架构师是一位技术领导，这意味着架构师除了拥有专门技能外，还必需拥有领导能力。领导能力既体现在组织中职位上，也体现在架构师展现的品质上。
- 架构师也应该参与到决定如何组建团队中来，因为这种架构将意味着需要特定的技能。
- 另外，架构师必需非常关注交付的实际结果并必须作为项目在技术方面的驱动力。架构师必须能够进行决策（通常在压力下）并确保这些决策被传达、理解并最终被执行。

=== 架构师的角色可能由一个团队来履行 ===
- 一个团队是拥有共同目的、执行目标、拥有使他们可以相互负责的方法的、技能相互补充的小部分人。
- 最优秀的架构通常由一个团队而不是个人创建、这仅仅因为当有多人参与进来时，见识更广和更深。
- 架构团队概念的一个缺陷是，它可能被理解成一个象牙塔，它的产出仅仅为了显示智力而不是实用。通过确保和所有的利益相关者积极地商议、对架构及其价值进行讨论，以及确保考虑任何有影响的组织政策，这个误解可以从一开始就减到最小。

=== 架构师理解软件开发流程 ===
- 理解团队成员的角色的职责，理解他们正在生产和使用的东西，这对架构师来说很重要。实质上，团队成员希望架构师能够指导他们如何完成他们的职责，架构师必须能够以和团队遵循的的开发流程一致的方式做出反应。

=== 架构师掌握业务领域的知识 ===
领域 :: 是从事于某一行业的人理解的归纳为一组概念和术语的知识或活动范围。

- 一个优秀的架构师通常平衡掌握软件开发知识和业务领域知识。当架构师理解软件开发而不理解业务模型时，可能会开发出一个不满足需求但反映这种架构师所熟悉内容的解决方案。

=== 架构师掌握技术知识 ===
- 架构师应该拥有一定程度的技术技能。然而，架构师不必是一个技术专家，他必须关注技术的重要因素，而不是细节。

=== 架构师掌握设计技能 ===
- 架构使关键设计决策具体化，因此，架构师应该拥有很强的设计技能。关键设计决策可以指关键结构设计决策、特定模型的选择、指导规格说明书等。

{{{class="brush:text"
    一个人不可能在短时间内获得设计的能力，而是多年经验积累的结果。甚至当设计专家回顾他们早期的工作时都惊讶原来的设计如此不好。
当学习一项新技能时，为了精通都必须进行设计实践。
}}}

=== 架构师具备编程技能 ===
- 架构师应该具有一定的编程技能，即使他们在项目中不必编写代码，也必须跟上技术更新的脚步。

=== 架构师是优秀的沟通人员 ===
- 与架构师相关的所有软技能中，沟通最重要。有效的沟通涉及到各个方面，架构师必须全部精通。尤其是，架构师应该拥有有效的口头、书面和表达技巧。同样的，沟通应该是双向的。架构师应该既是优秀的聆听者，也是优秀的观察者。

=== 架构师进行决策 ===
- 在项目中适当的决策是架构师的事情。

=== 架构师知道组织政策 ===
- 成功的架构师并不仅仅关心技术，他们还对政治敏感并知道组织中的权力。

=== 架构师是谈判专家 ===
- 架构师需要和很多利益相关者进行交流，并把风险减到最小，其中的一些交流需要谈判技巧。

== 架构设计 ==
软件架构设计 :: 代表了一个架构的定义、文档编写、维护、改进和验证正确实现的活动。

=== 架构元模型图 ===
*IEEE 1471标准*

- 一个系统拥有一个架构。
- 一个系统实现一个或多个任务。
- 一个系统拥有一个或多个利益相关者。
- 一个系统存在于一个环境。
- 一个环境影响一个系统。
- 一个架构由一个架构描述来描述。
- 一个架构描述确定一个或多个利益相关者。
- 一个架构描述确定一个或多个关注点。
- 一个架构提供基本原理。
- 一个利益相关者拥有一个或多个关注点。
- 一个关注点对于一个或多个利益相关者来说很重要。

*非IEEE 1471标准*
- 一个开发项目由一个团队担任。
- 一个开发项目遵循一个开发流程。
- 一个开发项目开发一个系统。
- 开发流程包括架构设计。
- 团队包括架构师。
- 架构师执行架构设计。
- 架构师创建一个架构。
- 架构师是利益相关者的一种。
- 架构设计产生一个架构。
- 基本原理验证一个或多个架构决策。
- 一个架构决策处理一个或多个关注点。

{{http:pic/架构元模型图.png}}

=== 架构设计是一门科学 ===
- 它强调关注改进架构设计流程成熟度的技术、流程和资源。
- 概括的说，架构师在开发一个架构时寻找已验证的解决方案而不是重复发明，从而避免不必要的创造。

=== 架构设计是一门艺术 ===
- 它需要提供一定的创造力，当处理新奇的没有先例的系统时尤其需要如此。

=== 架构设计跨越很多方面 ===
- 架构师在需求方面提供帮助，例如，确保获取架构师特别感兴趣的那些需求。
- 架构师参与排定需求的优先级。
- 架构师参与实现，定义用于优化源代码及可执行工作产品的实现结构。
- 架构师参与测试，确保结构可测试并被测试。
- 架构师负责开发环境中定义一些项目标准及指导方针方面的工作。
- 架构师帮助定义配置管理策略，因为配置管理结构经常反映已经定义的架构。
- 架构师和项目经理紧密合作，架构师投入项目计划活动。

=== 架构设计是一个渐进的活动 ===
- 在项目早期，架构师关注于发现。重点是理解系统的范围、识别重要的特征及任何相关的风险。
- 然后，关注重点改变为创造，架构师的主要关注点是开发一个可以为完全实现提供基础的稳定的架构。
- 最后，当大部分发现和创造都已经发生后，关注重点改变为实现。

=== 架构设计受许多利益相关者驱动 ===
- 一个架构实现许多利益相关者的需要。因此，架构设计的流程必须考虑所有的利益相关者，以确保他们的关注点都被捕获、阐明、协调及管理。

=== 架构设计经常包括折中 ===
- 架构的设计包括折中，经常需要在冲突的需求之间进行折中，利益相关者必须商议来帮助进行正确的折中。

=== 架构设计承认经验 ===
可重用资源 :: 是对重复出现问题的解决方案。可重用资源是牢记在头脑中的已经开发过的资源。

- 架构师很少从一张白纸做起，他们积极地寻找那些可能编程架构模式的经验、设计模式、现有组件等。

=== 架构设计既由上而下也由下而上 ===
- 成功的架构师承认这两种架构设计的方式都是必须的，他们的架构既由上而下也由下而上，可以看作是架构设计“中间相会”的方式。
