= 包管理 =

%toc


== 包的创建和导入 ==
*关键字package和import，通常package名为小写，class名为第一个字母大写，每个包都只有一个public类，类名需与该类的文件名相同*
{{{class="brush: java"
package mypackage
import mypackage.myclass
}}}
*相同目录下的所有不具有明确package声明的文件，都被视为是该目录下缺省包的一部分*

== 环境变量 ==
*通过CLASSPATH来设置包的路径，特别注意的是如果是jar文件，变量应包含jar文件名*
{{{class="brush: text"
CLASSPATH=.:$JAVA_HOME:$PROJECT_HOME/XXX.jar
}}}

== 接口访问权限 ==
=== public访问权限 ===
*该权限说明其修饰的成员对外部和内部都是可用的*

=== protected访问权限 ===
*该权限说明只有继承了该类的子类和同一个包中的类才是可见的，对其他外部类是不可见的*

=== private访问权限 ===
*该权限说明只有在类的内部才是可访问的，其他外部都是不可见的*

=== friendly访问权限 ===
*不加任何修饰符的默认权限，该权限说明在包内部是可见的，外部是不可见的*

== 组合和继承 ==
=== 组合 ===
*当一个类中包含了多个类，则是将多个类组合成具有新特性的类*

=== 继承 ===
*使用extends关键字对一个类进行继承，继承的子类可以包含基类的属性和方法*
{{{class="brush: java"
public class myclass2 extends myclass1 {

}
}}}

*关键字protected可以将基类的成员提供给子类可见，同时让外部不可见*
{{{class="brush: java"
public class myclass2 extends myclass1 {
    protected String s;
}
}}}

*关键字super表示基类，可以对基类的成员进行引用*

=== 重载 ===
*子类对于父类的方法重载不会屏蔽父类的同名方法,父类的方法仍然可以调用,这和C++中的重载是有区别的*

== 关键字final ==
=== final变量 ===
1.定义一个常量时,使用关键字final,且在定义时必须对此常量赋值

2.一个既是static又是final的域只占一份不能改变的存储空间

3.对于原始数据类型,final使数值恒定不变,对于引用而言,final使引用不变,即该引用不能指向另一个对象,但引用本身可以改变

4.当final修饰参数时,表明在函数中不能改变该参数引用的对象

=== final方法 ===
1.对一个方法使用final可以防止继承类修改该方法和重载

2.final可以使该方法转为内嵌调用

3.不要过多的使用final方法,以产生过多的开销

=== final与private ===
所有以private修饰的方法都是final的,因此它们不能被重载

=== final类 ===
final来修饰类表明该类是不允许继承的,其方法也是不可以重载的

== 类的初始化过程 ==
*被运行的类被编译为.class结尾的文件,解释器加载该文件,*

*并访问其中标识为static类型的main方法,如果该类继承自某个基类,则基类被加载,*

*并依此类推加载基类,先初始化基类的变量,然后返回子类初始化,最后执行其他部分*
