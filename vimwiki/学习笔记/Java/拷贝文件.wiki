= 拷贝文件的方法 =

%toc

== 相关类 ==
{{{class="brush:java"
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.channels.FileChannel;
import java.nio.ByteBuffer;
}}}

== 古老的方式 ==
{{{class="brush:java"
public static void forJava(File f1,File f2) throws Exception{
    int length=2097152;
    
    FileInputStream in=new FileInputStream(f1);
    FileOutputStream out=new FileOutputStream(f2);
    byte[] buffer=new byte[length];
    
    while(true){
        int ins=in.read(buffer);
        
        if(ins==-1){
            in.close();
            out.flush();
            out.close();
            
            return;
        } else
            out.write(buffer,0,ins);
        }
    }
}
}}}

== 使用NIO中的管道到管道传输 ==
{{{class="brush:java"
public static void forTransfer(File f1,File f2) throws Exception{
    int length=2097152;
    FileInputStream in=new FileInputStream(f1);
    FileOutputStream out=new FileOutputStream(f2);
    FileChannel inC=in.getChannel();
    FileChannel outC=out.getChannel();
    int i=0;
    
    while(true){
        if(inC.position()==inC.size()) {
            inC.close();
            outC.close();
            
            return;
        }
        
        if((inC.size()-inC.position()) < length) {
            length=(int)(inC.size()-inC.position());
        } else {
            int length=2097152;
        }
        
        inC.transferTo(inC.position(),length,outC);
        inC.position(inC.position()+length);
        i++;
    }
}
}}}

== 内存文件读写 ==
{{{class="brush:java"
public static void forImage(File f1,File f2) throws Exception{
    int length=2097152;
    FileInputStream in=new FileInputStream(f1);
    RandomAccessFile out=new RandomAccessFile(f2,"rw");
    FileChannel inC=in.getChannel();
    MappedByteBuffer outC=null;
    MappedByteBuffer inbuffer=null;
    byte[] b=new byte[length];
    
    while(true){
        if(inC.position()==inC.size()){
            inC.close();
            outC.force();
            out.close();
            
            return;
        }
        
        if((inC.size()-inC.position()) < length){
            length=(int)(inC.size()-inC.position());
        } else {
            length=20971520;
        }
        
        b=new byte[length];
        inbuffer=inC.map(MapMode.READ_ONLY,inC.position(),length);
        inbuffer.load();
        inbuffer.get(b);
        outC=out.getChannel().map(MapMode.READ_WRITE,inC.position(),length);
        inC.position(b.length+inC.position());
        outC.put(b);
        outC.force();
    }
}
}}}

== 管道对管道 ==
{{{class="brush:java"
public static void forChannel(File f1,File f2) throws Exception {
    int length = 2097152;
    FileInputStream in = new FileInputStream(f1);
    FileOutputStream out = new FileOutputStream(f2);
    FileChannel inC = in.getChannel();
    FileChannel outC = out.getChannel();
    ByteBuffer b = null;
    
    while(true) {
        if(inC.position() == inC.size()){
            inC.close();
            outC.close();
            return; 
        }
        
        if((inC.size()-inC.position()) < length) {
            length = (int)(inC.size()-inC.position());
        } else {
            length = 2097152;
        }
        
        b = ByteBuffer.allocateDirect(length);
        inC.read(b);
        b.flip();
        outC.write(b);
        outC.force(false);
    }
}
}}}

