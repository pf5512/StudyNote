= List Set Map比较 =

%toc

== List ==
- 次序是List最重要的特点：它保证维护元素特定的顺序。一个List可以生成ListIterator,使用它可以从两个方向遍历List,也可以从List中间插入和移除元素。

| 类         | 接口 | 功能                                                                                   |
|------------|------|----------------------------------------------------------------------------------------|
| ArrayList  | List | 由数组实现的List。允许对元素进行快速随机访问，但是向List中间插入与移除元素的速度很慢。 |
| LinkedList | List | 对顺序访问进行了优化，向List中间插入与删除的开销并不大。随机访问则相对较慢。           |

== Set ==
- 存入Set的每个元素都必须是唯一的，因为Set不保存重复元素。加入Set的元素必须定义equals()方法以确保对象的唯一性。Set与Collection有完全一样的接口。Set接口不保证维护元素的次序。

| 类            | 接口 | 功能                                                                                                                     |
|---------------|------|--------------------------------------------------------------------------------------------------------------------------|
| HashSet       | Set  | 为快速查找设计的Set。存入HashSet的对象必须定义hashCode()。                                                               |
| TreeSet       | Set  | 保存次序的Set, 底层为树结构。使用它可以从Set中提取有序的序列。                                                           |
| LinkedHashSet | Set  | 具有HashSet的查询速度，且内部使用链表维护元素的顺序(插入的次序)。于是在使用迭代器遍历Set时，结果会按元素插入的次序显示。 |

== Map ==
- 维护“键值对”的关联性，使你可以通过“键”查找“值”。

| 类              | 接口 | 功能                                                                                                                                                                                                    |
|-----------------|------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| HashMap         | Map  | Map基于散列表的实现。插入和查询“键值对”的开销是固定的。可以通过构造器设置容量capacity和负载因子load factor，以调整容器的性能。                                                                          |
| LinkedHashMap   | Map  | 类似于HashMap，但是迭代遍历它时，取得“键值对”的顺序是其插入次序，或者是最近最少使用(LRU)的次序。只比HashMap慢一点。而在迭代访问时发而更快，因为它使用链表维护内部次序。                                 |
| TreeMap         | Map  | 基于红黑树数据结构的实现。查看“键”或“键值对”时，它们会被排序(次序由Comparabel或Comparator决定)。TreeMap的特点在于，你得到的结果是经过排序的。TreeMap是唯一的带有subMap()方法的Map，它可以返回一个子树。 |
| WeakHashMap     | Map  | 弱键(weak key)Map，Map中使用的对象也被允许释放: 这是为解决特殊问题设计的。如果没有map之外的引用指向某个“键”，则此“键”可以被垃圾收集器回收。                                                             |
| IdentifyHashMap | Map  | 使用==代替equals()对“键”作比较的hash map。专为解决特殊问题而设计。                                                                                                                                      |
