= 接口和抽象类型 =

== 基本概念 ==
抽象类 :: 声明方法的存在而不去实现它的类叫做抽象类，它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。

接口 :: 抽象类的变体。在接口中，所有方法都是抽象的，多重继承性可以通过这样的接口实现。

== 两者的比较 ==
|          | Abstract class                                | Interface                                   |
|----------|-----------------------------------------------|---------------------------------------------|
| 实例化   | 不能                                          | 不能                                        |
| 类继承   | 一个类只能进行一次继承                        | 一个类可以实现多个Interface                 |
| 数据成员 | 没有限制                                      | 必须是static final类型                      |
| 方法     | 可以是private，如果是非abstract方法，必须实现 | 不能是private类型，且必须是abstract         |
| 变量     | 可以是private，可以在子类中重新定义           | 不能是private，必须赋初值，在子类中不能改变 |
| 设计模式 | 表示"is-a"关系                                | 表示"like-a"关系                            |
| 实现     | 通过extends关键字继承                         | 通过implements关键字实现                    |

=== interface的应用 ===
{{{class="brush:text"
A. 类与类之前需要特定的接口进行协调，而不在乎其如何实现。
B. 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。
C. 需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。
D. 需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。
}}}

=== abstract class的应用 ===
*在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它。*
{{{class="brush:text"
A. 定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用abstract class定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。
B. 某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。abstract的中介作用可以很好地满足这一点。
C. 规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。
}}}
