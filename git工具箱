1. Git 配置

1.1 配置用户
$ git config --global user.name “xxx”
$ git config --global user.email “xxx@xxx”

1.2 配置编辑器
$ git config --global core.editor vim
$ git config --global merge.tool vimdiff

1.3 访问https
1.3.1 获取SSL证书文件
$ echo | openssl s_client -connect 10.180.34.35:443 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ~/10.180.34.35.crt
1.3.2 配置证书文件
$ git config --global http.sslcainfo ~/10.180.34.35.crt

访问https
$ git clone https://username@IP_Address/project_location

1.4 访问SSH服务器
1.4.1 生成公钥和密钥
$ ssh-keygen -t rsa -C "zenki.j.zha@foxconn.com"

1.4.2 添加公钥到服务器 
# 将公钥信息添加到服务器，服务器会提供如Web方式，导入你的公钥。
# 同时修改你的公钥和密钥权限
$ chmod 700 ~/.ssh/
$ chmod 600 ~/.ssh/*

1.4.3  添加配置信息
# 添加以下信息到~/.ssh/config，用来管理登录信息
Host tr
  Hostname gerrit.ext.ti.com
  Port 29418
  User Zenki

1.4.4  添加rsa密钥
$ ssh-add ~/.ssh/id_rsa

1.4.5 启用ssh-agent
$ ssh-agent 

1.5 配置默认的远程分支
$ git config branch.master.remote origin
$ git config branch.master.merge refs/heads/master

1.6 配置文件示例
# 以下是.gitconfig配置文件的示例：
[color]
	ui = auto
    status = auto
    branch = auto
[http]
	sslVerify = false
	sslcainfo = /home/zenki/10.180.34.35.crt
[user]
	name = Zenki.J.Zha
	email = Zenki.J.Zha@foxconn.com
	;name = git@127.0.0.1
    ;signingkey = <gpg-key-id>
[branch "gh-pages"]
        remote = origin
        merge = refs/heads/gh-pages
[core]
	editor = vim
[merge]
	tool = vimdiff
[alias]
    au = add -u
    aa = add -A
    co = checkout
    ci = commit -m 
    st = status
    oneline = log --pretty=oneline
    oneline2 = log --pretty=oneline --since='2 days ago'
    onelog = log -p -1
    diffl = diff --stat
    graph = log --oneline --decorate --graph


2. Git 一分钟上手

2.1 操作流程
取代码 → 每次工作前更新代码到最新版本 → 修改代码 → 提交代码到服务器

2.2 设置用户名与邮箱
$ git config --global user.name "My Name"
$ git config --global user.email "my@email.com"

2.2 提取代码
$ git clone git@server:app.git myrepo

2.3 同步代码的操作流程
2.3.1 更新本地代码到最新版本
# 需要merge才能合到本地代码中
$ git fetch

2.3.2 合并更新后的代码到本地
$ git merge

2.3.3 更新代码方式的另一种方法
# “git pull”是“git fetch”和“git merge”命令的一个组合
$ git pull origin testing

2.3.4 查看差异的内容
# 查看当前修改和最近提交的差异
$ git diff
# 查看已经staged内容
$ git diff --cached
# 查看差异文件的列表
$ git diff origin/master --stat
# 查看当前修改和指定提交的差异
$ git diff 52d9d285077cd26b3a8566cc0ec0f2031129b30e 52d9d285077cd26b3a8566cc0ec0f2031129b30e
# 比较两次提交的差异，并指定特定的文件
$ git diff HEAD HEAD^ system/vold

2.3.5 跟踪修改的文件
# stage好比将文件加入跟踪列表，只有stage的文件才会被提交
$ git add file1 file2 file3
$ git add .
$ git add -u
$ git add -A

2.4 删除文件
$ git rm file1
$ git rm -r dir1

2.5 提交和上传文件
$ git commit -m 'this is memo'

2.5.1 提交文件
# 如果想省掉提交之前的“git add”命令，可以直接用
$ git commit -a -m 'this is memo'

# commit和commit -a的区别, commit -a相当于：
* 第一步：自动地add所有改动的代码，使得所有的开发代码都列于index file中
* 第二步：自动地删除那些在index file中但不在工作树中的文件
* 第三步：执行commit命令来提交

2.5.2 上传文件
# 提交所有修改到远程服务器，这样，其它团队成员才能更新到这些修改
$ git push
$ git push origin testing
$ git push ssh://Zenki@gerrit.ext.ti.com:29418/apps/Foxconn/omap3/framework HEAD:refs/heads/master
$ git push -u origin gh-pages

2.6 显示日志和仓库信息
2.6.1 显示commit日志
$ git log
# 显示简要的版本信息和日志
$ git log --pretty=oneline --since='2 days ago'
# 查看路线图
$ git log --oneline --decorate --graph
# 显示每个提交者的简要信息
$ git shortlog -e

2.6.2 显示commit日志和修改内容
$ git log -p -2
$ git show 66118f531f401430bfe1e9a811ff81bede8ada41

2.6.3 显示分支信息
$ git show-branch

2.6.4 显示引用信息
$ git show-ref

2.7 回滚和还原版本
2.7.1 还原修改（附加历史comment信息）
# 提供一个版本号，git将还原该版本的修改，而之前的历史版本不会消失
$ git revert HEAD^

2.7.2 回滚版本（无历史comment信息）
# 回滚到给定版本的修改，之前的历史版本会消失
$ git reset HEAD^^
$ git reset file1 file2
$ git reset ded0993b22b7c81d82d17374eb5df9bf6e6f23a2

2.8 解决冲突
    当merge命令自身无法解决冲突的时候，它会将工作树置于一种特殊的状态，并且给用户提供冲突信息，
以期用户可以自己解决这些问题。当然在这个时候，未发生冲突的代码已经被“git merge”登记在了“index file”里了。
如果你这个时候使用“git diff”，显示出来的只是发生冲突的代码信息。
    在你解决了冲突之前，发生冲突的文件会一直在“index file”中被标记出来。这个时候，如果你使用“git commit”提交的话，
git会提示：“filename.txt needs merge”
    在发生冲突的时候，如果你使用“git status”命令，那么会显示出发生冲突的具体信息。
    在你解决了冲突之后，你可以使用如下步骤来提交：

* 第一步：编辑修改冲突文件(如果需要增加文件)：
$ git add file1

* 第二步：提交修改代码
$ git commit

2.9 恢复修改文件
2.9.1 从服务器更新文件
$ git pull origin testing

2.9.2 恢复修改过的文件
$ git checkout -f file1 file2

2.10 清除暂存区
$ rm .git/index

3. Git 高级应用
3.1 补丁生成和应用
3.1.1 生成标准patch
# 查看当前修改和最近提交的差异
$ git diff
# 查看当前修改和指定提交的差异
$ git diff 52d9d285077cd26b3a8566cc0ec0f2031129b30e 52d9d285077cd26b3a8566cc0ec0f2031129b30e
# 比较两次提交的差异，并指定特定的文件
$ git diff HEAD HEAD^ system/vold

3.1.2 生成git专用patch
# -M 表示分支名称
# -s 表示从历史的第几个版本开始，patch生成的方向是当前版本。-99999表示从很早的版本开始。
$ git format-patch -M master -s -99999 system/vold

3.1.3 应用补丁
# 应用diff生成的patch
$ git apply diff.patch
# 应用format-patch生成的patch
$ git am 0001-some-files.patch

3.2 分支操作
3.2.1 创建分支
$ git branch testing

3.2.2 切换分支
# 在创建分支前，如果有修改的文件，会延续到分支中。
# 并且这些修改可以在分支中被提交。
$ git checkout testing

3.2.3 合并分支
# 切换到主分支master，然后合并testing的分支
# 如果合并发生冲突，需要自己解决冲突
$ git checkout master
$ git merge testing

3.3 stage文件的几种方法
3.3.1 without deleted
# 添加模式，不包含删除模式
$ git add .

# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
# Changed but not updated:
#   deleted:    delete-me

3.3.2 without new
# update模式，只更新已经跟踪的文件
$ git add -u

# Changes to be committed:
#   modified:   change-me
#   deleted:    delete-me
# Untracked files:
#   add-me

3.3.3 with all
# 包含所有文件
$ git add -A
# Changes to be committed:
#   new file:   add-me
#   modified:   change-me
#   deleted:    delete-me

3.3.4 交互式提交
$ git add -i

3.4 stash当前修改
3.4.1 存储修改
# stash命令将当前的修改存储起来，去作其他的修改，而当前的状态
# 则是stash之前的状态。当提交了其他的修改后，在恢复存储的修改。
$ git stash
$ git stash save "message"

3.4.2 显示stash列表
$ git stash list
$ git stash show stash@{0}

3.4.3 恢复一个存储
$ git stash apply
$ git stash apply stash@{0}

3.4.4 清除存储仓库
$ git stash clear

3.5 忽略某些文件
3.5.1 添加.gitignore
# 在任何目录下添加.gitignore文件，并加入不需要跟踪的文件名
# 以'#' 开始的行，被视为注释.
# 忽略掉所有文件名是 foo.txt 的文件.
foo.txt
# 忽略所有生成的html文件,
*.html
# foo.html是手工维护的，所以例外.
!foo.html
# 忽略所有.o和.a文件.
*.[oa]

3.5.2 编辑.git/info/exclude
# 将需要忽略的文件加入到exlcude文件中

3.6 标签管理
3.6.1 添加标签
$ git tag -a v1.0 -m "tag v1.0"

3.6.2 分享标签
$ git push origin v1.0
$ git push --tags
$ git push origin refs/tags/*

3.6.3 列出所有标签
$ git tag -l

3.6.4 删除标签
# 删除本地标签
$ git tag -d v1.0
# 删除远程库的标签
$ git push origin :v1.0

3.7 自动化脚本
# 在.git/hooks/目录中可以编写各种脚本，
# 服务器可以在接收到代码提交时触发执行这些脚本。
# 将sample的后缀去掉后即可启动这些脚本。

4. Git 图形界面
# 查看历史版本的图形化工具
4.1 gitk

# 修改和提交代码的图形化工具
4.2 git citool

% vim:ft=txt
